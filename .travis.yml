language: node_js
node_js:
  - "10"

cache:
  npm: true

services:
  - docker

stages:
  - name: test
  - name: build
  - name: deploy
  - name: deploy:prod
  - name: aws
    if: branch = master

jobs:
  include:
    - stage: test
      install:
        - npm install -g prisma
        - docker-compose -f prisma/docker-compose.yml up -d
        - npm install
      script:
        - cd prisma && prisma generate && prisma deploy
        - npm run test

    - stage: build
      install:
        - npm install -g prisma
        - npm install
      script:
        - cd prisma && prisma generate
        - npm run build

    - stage: deploy
      install:
        - docker-compose -f prisma/docker-compose.yml up -d
        - npm install -g prisma
        - npm install
      script:
        - cd prisma && prisma generate && prisma deploy && cd ..
        - npm run build
        - docker login --username $DOCKER_USER -p $DOCKER_PASS
        - docker build -t rctechclub/phoenix:dev .
        - docker push rctechclub/phoenix:dev

    - if: branch = master
      stage: deploy
      env:
        - PRISMA_HOST=$PRISMA_HOST_PROD
        - PRISMA_SECRET=$PRISMA_SECRET_PROD
        - PRISMA_MANAGEMENT_API_SECRET=$PRISMA_MANAGEMENT_API_SECRET_PROD
        - DB_HOST=$DB_HOST_PROD
        - DB_USER=$DB_USER_PROD
        - DB_PASSWORD=$DB_PASSWORD_PROD
      install:
        - npm install -g prisma
        - npm install
      script:
        - cd prisma && prisma generate && prisma deploy && cd ..
        - npm run build
        - docker login --username $DOCKER_USER -p $DOCKER_PASS
        - docker build -t rctechclub/phoenix:prod .
        - docker push rctechclub/phoenix:prod

    - stage: aws
      install:
        - pip install --user awscli
        - export PATH=$PATH:$HOME/.local/bin
      script:
        - aws ecs update-service --cluster phoenix-prod --service phoenix --force-new-deployment --region us-east-2
