// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  society: (where?: SocietyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  washer: (where?: WasherWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  society: (where: SocietyWhereUniqueInput) => SocietyNullablePromise;
  societies: (args?: {
    where?: SocietyWhereInput;
    orderBy?: SocietyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Society>;
  societiesConnection: (args?: {
    where?: SocietyWhereInput;
    orderBy?: SocietyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocietyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  washer: (where: WasherWhereUniqueInput) => WasherNullablePromise;
  washers: (args?: {
    where?: WasherWhereInput;
    orderBy?: WasherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Washer>;
  washersConnection: (args?: {
    where?: WasherWhereInput;
    orderBy?: WasherOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WasherConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSociety: (data: SocietyCreateInput) => SocietyPromise;
  updateSociety: (args: {
    data: SocietyUpdateInput;
    where: SocietyWhereUniqueInput;
  }) => SocietyPromise;
  updateManySocieties: (args: {
    data: SocietyUpdateManyMutationInput;
    where?: SocietyWhereInput;
  }) => BatchPayloadPromise;
  upsertSociety: (args: {
    where: SocietyWhereUniqueInput;
    create: SocietyCreateInput;
    update: SocietyUpdateInput;
  }) => SocietyPromise;
  deleteSociety: (where: SocietyWhereUniqueInput) => SocietyPromise;
  deleteManySocieties: (where?: SocietyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWasher: (data: WasherCreateInput) => WasherPromise;
  updateWasher: (args: {
    data: WasherUpdateInput;
    where: WasherWhereUniqueInput;
  }) => WasherPromise;
  updateManyWashers: (args: {
    data: WasherUpdateManyMutationInput;
    where?: WasherWhereInput;
  }) => BatchPayloadPromise;
  upsertWasher: (args: {
    where: WasherWhereUniqueInput;
    create: WasherCreateInput;
    update: WasherUpdateInput;
  }) => WasherPromise;
  deleteWasher: (where: WasherWhereUniqueInput) => WasherPromise;
  deleteManyWashers: (where?: WasherWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  society: (
    where?: SocietySubscriptionWhereInput
  ) => SocietySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  washer: (
    where?: WasherSubscriptionWhereInput
  ) => WasherSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "image_url_ASC"
  | "image_url_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "room_no_ASC"
  | "room_no_DESC";

export type SocietyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type WasherOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "time_elapsed_ASC"
  | "time_elapsed_DESC"
  | "time_remaining_ASC"
  | "time_remaining_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type SocietyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  image_url?: Maybe<String>;
  image_url_not?: Maybe<String>;
  image_url_in?: Maybe<String[] | String>;
  image_url_not_in?: Maybe<String[] | String>;
  image_url_lt?: Maybe<String>;
  image_url_lte?: Maybe<String>;
  image_url_gt?: Maybe<String>;
  image_url_gte?: Maybe<String>;
  image_url_contains?: Maybe<String>;
  image_url_not_contains?: Maybe<String>;
  image_url_starts_with?: Maybe<String>;
  image_url_not_starts_with?: Maybe<String>;
  image_url_ends_with?: Maybe<String>;
  image_url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  room_no?: Maybe<String>;
  room_no_not?: Maybe<String>;
  room_no_in?: Maybe<String[] | String>;
  room_no_not_in?: Maybe<String[] | String>;
  room_no_lt?: Maybe<String>;
  room_no_lte?: Maybe<String>;
  room_no_gt?: Maybe<String>;
  room_no_gte?: Maybe<String>;
  room_no_contains?: Maybe<String>;
  room_no_not_contains?: Maybe<String>;
  room_no_starts_with?: Maybe<String>;
  room_no_not_starts_with?: Maybe<String>;
  room_no_ends_with?: Maybe<String>;
  room_no_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SocietyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  AND?: Maybe<SocietyWhereInput[] | SocietyWhereInput>;
  OR?: Maybe<SocietyWhereInput[] | SocietyWhereInput>;
  NOT?: Maybe<SocietyWhereInput[] | SocietyWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WasherWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface WasherWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  time_elapsed?: Maybe<String>;
  time_elapsed_not?: Maybe<String>;
  time_elapsed_in?: Maybe<String[] | String>;
  time_elapsed_not_in?: Maybe<String[] | String>;
  time_elapsed_lt?: Maybe<String>;
  time_elapsed_lte?: Maybe<String>;
  time_elapsed_gt?: Maybe<String>;
  time_elapsed_gte?: Maybe<String>;
  time_elapsed_contains?: Maybe<String>;
  time_elapsed_not_contains?: Maybe<String>;
  time_elapsed_starts_with?: Maybe<String>;
  time_elapsed_not_starts_with?: Maybe<String>;
  time_elapsed_ends_with?: Maybe<String>;
  time_elapsed_not_ends_with?: Maybe<String>;
  time_remaining?: Maybe<String>;
  time_remaining_not?: Maybe<String>;
  time_remaining_in?: Maybe<String[] | String>;
  time_remaining_not_in?: Maybe<String[] | String>;
  time_remaining_lt?: Maybe<String>;
  time_remaining_lte?: Maybe<String>;
  time_remaining_gt?: Maybe<String>;
  time_remaining_gte?: Maybe<String>;
  time_remaining_contains?: Maybe<String>;
  time_remaining_not_contains?: Maybe<String>;
  time_remaining_starts_with?: Maybe<String>;
  time_remaining_not_starts_with?: Maybe<String>;
  time_remaining_ends_with?: Maybe<String>;
  time_remaining_not_ends_with?: Maybe<String>;
  AND?: Maybe<WasherWhereInput[] | WasherWhereInput>;
  OR?: Maybe<WasherWhereInput[] | WasherWhereInput>;
  NOT?: Maybe<WasherWhereInput[] | WasherWhereInput>;
}

export interface SocietyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  members?: Maybe<UserCreateManyInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  image_url: String;
  phone: String;
  first_name: String;
  last_name: String;
  room_no: String;
}

export interface SocietyUpdateInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  image_url?: Maybe<String>;
  phone?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  room_no?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  image_url?: Maybe<String>;
  image_url_not?: Maybe<String>;
  image_url_in?: Maybe<String[] | String>;
  image_url_not_in?: Maybe<String[] | String>;
  image_url_lt?: Maybe<String>;
  image_url_lte?: Maybe<String>;
  image_url_gt?: Maybe<String>;
  image_url_gte?: Maybe<String>;
  image_url_contains?: Maybe<String>;
  image_url_not_contains?: Maybe<String>;
  image_url_starts_with?: Maybe<String>;
  image_url_not_starts_with?: Maybe<String>;
  image_url_ends_with?: Maybe<String>;
  image_url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  room_no?: Maybe<String>;
  room_no_not?: Maybe<String>;
  room_no_in?: Maybe<String[] | String>;
  room_no_not_in?: Maybe<String[] | String>;
  room_no_lt?: Maybe<String>;
  room_no_lte?: Maybe<String>;
  room_no_gt?: Maybe<String>;
  room_no_gte?: Maybe<String>;
  room_no_contains?: Maybe<String>;
  room_no_not_contains?: Maybe<String>;
  room_no_starts_with?: Maybe<String>;
  room_no_not_starts_with?: Maybe<String>;
  room_no_ends_with?: Maybe<String>;
  room_no_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  image_url?: Maybe<String>;
  phone?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  room_no?: Maybe<String>;
}

export interface SocietyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  image_url?: Maybe<String>;
  phone?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  room_no?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  image_url?: Maybe<String>;
  phone?: Maybe<String>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  room_no?: Maybe<String>;
}

export interface WasherCreateInput {
  id?: Maybe<ID_Input>;
  status: String;
  time_elapsed: String;
  time_remaining: String;
}

export interface WasherUpdateInput {
  status?: Maybe<String>;
  time_elapsed?: Maybe<String>;
  time_remaining?: Maybe<String>;
}

export interface WasherUpdateManyMutationInput {
  status?: Maybe<String>;
  time_elapsed?: Maybe<String>;
  time_remaining?: Maybe<String>;
}

export interface SocietySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocietyWhereInput>;
  AND?: Maybe<SocietySubscriptionWhereInput[] | SocietySubscriptionWhereInput>;
  OR?: Maybe<SocietySubscriptionWhereInput[] | SocietySubscriptionWhereInput>;
  NOT?: Maybe<SocietySubscriptionWhereInput[] | SocietySubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WasherSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WasherWhereInput>;
  AND?: Maybe<WasherSubscriptionWhereInput[] | WasherSubscriptionWhereInput>;
  OR?: Maybe<WasherSubscriptionWhereInput[] | WasherSubscriptionWhereInput>;
  NOT?: Maybe<WasherSubscriptionWhereInput[] | WasherSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Society {
  id: ID_Output;
  name: String;
}

export interface SocietyPromise extends Promise<Society>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SocietySubscription
  extends Promise<AsyncIterator<Society>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SocietyNullablePromise
  extends Promise<Society | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  image_url: String;
  phone: String;
  first_name: String;
  last_name: String;
  room_no: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  image_url: () => Promise<String>;
  phone: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  room_no: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  room_no: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  image_url: () => Promise<String>;
  phone: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  room_no: () => Promise<String>;
}

export interface SocietyConnection {
  pageInfo: PageInfo;
  edges: SocietyEdge[];
}

export interface SocietyConnectionPromise
  extends Promise<SocietyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocietyEdge>>() => T;
  aggregate: <T = AggregateSocietyPromise>() => T;
}

export interface SocietyConnectionSubscription
  extends Promise<AsyncIterator<SocietyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocietyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocietySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SocietyEdge {
  node: Society;
  cursor: String;
}

export interface SocietyEdgePromise extends Promise<SocietyEdge>, Fragmentable {
  node: <T = SocietyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocietyEdgeSubscription
  extends Promise<AsyncIterator<SocietyEdge>>,
    Fragmentable {
  node: <T = SocietySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSociety {
  count: Int;
}

export interface AggregateSocietyPromise
  extends Promise<AggregateSociety>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocietySubscription
  extends Promise<AsyncIterator<AggregateSociety>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Washer {
  id: ID_Output;
  status: String;
  time_elapsed: String;
  time_remaining: String;
}

export interface WasherPromise extends Promise<Washer>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  time_elapsed: () => Promise<String>;
  time_remaining: () => Promise<String>;
}

export interface WasherSubscription
  extends Promise<AsyncIterator<Washer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  time_elapsed: () => Promise<AsyncIterator<String>>;
  time_remaining: () => Promise<AsyncIterator<String>>;
}

export interface WasherNullablePromise
  extends Promise<Washer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  time_elapsed: () => Promise<String>;
  time_remaining: () => Promise<String>;
}

export interface WasherConnection {
  pageInfo: PageInfo;
  edges: WasherEdge[];
}

export interface WasherConnectionPromise
  extends Promise<WasherConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WasherEdge>>() => T;
  aggregate: <T = AggregateWasherPromise>() => T;
}

export interface WasherConnectionSubscription
  extends Promise<AsyncIterator<WasherConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WasherEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWasherSubscription>() => T;
}

export interface WasherEdge {
  node: Washer;
  cursor: String;
}

export interface WasherEdgePromise extends Promise<WasherEdge>, Fragmentable {
  node: <T = WasherPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WasherEdgeSubscription
  extends Promise<AsyncIterator<WasherEdge>>,
    Fragmentable {
  node: <T = WasherSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWasher {
  count: Int;
}

export interface AggregateWasherPromise
  extends Promise<AggregateWasher>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWasherSubscription
  extends Promise<AsyncIterator<AggregateWasher>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SocietySubscriptionPayload {
  mutation: MutationType;
  node: Society;
  updatedFields: String[];
  previousValues: SocietyPreviousValues;
}

export interface SocietySubscriptionPayloadPromise
  extends Promise<SocietySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocietyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocietyPreviousValuesPromise>() => T;
}

export interface SocietySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocietySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocietySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocietyPreviousValuesSubscription>() => T;
}

export interface SocietyPreviousValues {
  id: ID_Output;
  name: String;
}

export interface SocietyPreviousValuesPromise
  extends Promise<SocietyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface SocietyPreviousValuesSubscription
  extends Promise<AsyncIterator<SocietyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  image_url: String;
  phone: String;
  first_name: String;
  last_name: String;
  room_no: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  image_url: () => Promise<String>;
  phone: () => Promise<String>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  room_no: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  image_url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  room_no: () => Promise<AsyncIterator<String>>;
}

export interface WasherSubscriptionPayload {
  mutation: MutationType;
  node: Washer;
  updatedFields: String[];
  previousValues: WasherPreviousValues;
}

export interface WasherSubscriptionPayloadPromise
  extends Promise<WasherSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WasherPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WasherPreviousValuesPromise>() => T;
}

export interface WasherSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WasherSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WasherSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WasherPreviousValuesSubscription>() => T;
}

export interface WasherPreviousValues {
  id: ID_Output;
  status: String;
  time_elapsed: String;
  time_remaining: String;
}

export interface WasherPreviousValuesPromise
  extends Promise<WasherPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  time_elapsed: () => Promise<String>;
  time_remaining: () => Promise<String>;
}

export interface WasherPreviousValuesSubscription
  extends Promise<AsyncIterator<WasherPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  time_elapsed: () => Promise<AsyncIterator<String>>;
  time_remaining: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Washer",
    embedded: false
  },
  {
    name: "Society",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
