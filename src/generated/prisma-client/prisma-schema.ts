// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateSociety {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWasher {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createSociety(data: SocietyCreateInput!): Society!
  updateSociety(data: SocietyUpdateInput!, where: SocietyWhereUniqueInput!): Society
  updateManySocieties(data: SocietyUpdateManyMutationInput!, where: SocietyWhereInput): BatchPayload!
  upsertSociety(where: SocietyWhereUniqueInput!, create: SocietyCreateInput!, update: SocietyUpdateInput!): Society!
  deleteSociety(where: SocietyWhereUniqueInput!): Society
  deleteManySocieties(where: SocietyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWasher(data: WasherCreateInput!): Washer!
  updateWasher(data: WasherUpdateInput!, where: WasherWhereUniqueInput!): Washer
  updateManyWashers(data: WasherUpdateManyMutationInput!, where: WasherWhereInput): BatchPayload!
  upsertWasher(where: WasherWhereUniqueInput!, create: WasherCreateInput!, update: WasherUpdateInput!): Washer!
  deleteWasher(where: WasherWhereUniqueInput!): Washer
  deleteManyWashers(where: WasherWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  society(where: SocietyWhereUniqueInput!): Society
  societies(where: SocietyWhereInput, orderBy: SocietyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Society]!
  societiesConnection(where: SocietyWhereInput, orderBy: SocietyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocietyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  washer(where: WasherWhereUniqueInput!): Washer
  washers(where: WasherWhereInput, orderBy: WasherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Washer]!
  washersConnection(where: WasherWhereInput, orderBy: WasherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WasherConnection!
  node(id: ID!): Node
}

type Society {
  id: ID!
  name: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type SocietyConnection {
  pageInfo: PageInfo!
  edges: [SocietyEdge]!
  aggregate: AggregateSociety!
}

input SocietyCreateInput {
  id: ID
  name: String!
  members: UserCreateManyInput
}

type SocietyEdge {
  node: Society!
  cursor: String!
}

enum SocietyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SocietyPreviousValues {
  id: ID!
  name: String!
}

type SocietySubscriptionPayload {
  mutation: MutationType!
  node: Society
  updatedFields: [String!]
  previousValues: SocietyPreviousValues
}

input SocietySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocietyWhereInput
  AND: [SocietySubscriptionWhereInput!]
  OR: [SocietySubscriptionWhereInput!]
  NOT: [SocietySubscriptionWhereInput!]
}

input SocietyUpdateInput {
  name: String
  members: UserUpdateManyInput
}

input SocietyUpdateManyMutationInput {
  name: String
}

input SocietyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [SocietyWhereInput!]
  OR: [SocietyWhereInput!]
  NOT: [SocietyWhereInput!]
}

input SocietyWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  society(where: SocietySubscriptionWhereInput): SocietySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  washer(where: WasherSubscriptionWhereInput): WasherSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  image_url: String!
  phone: String!
  first_name: String!
  last_name: String!
  room_no: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  image_url: String!
  phone: String!
  first_name: String!
  last_name: String!
  room_no: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  image_url_ASC
  image_url_DESC
  phone_ASC
  phone_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  room_no_ASC
  room_no_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  image_url: String!
  phone: String!
  first_name: String!
  last_name: String!
  room_no: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  image_url: String
  image_url_not: String
  image_url_in: [String!]
  image_url_not_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_gt: String
  image_url_gte: String
  image_url_contains: String
  image_url_not_contains: String
  image_url_starts_with: String
  image_url_not_starts_with: String
  image_url_ends_with: String
  image_url_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  room_no: String
  room_no_not: String
  room_no_in: [String!]
  room_no_not_in: [String!]
  room_no_lt: String
  room_no_lte: String
  room_no_gt: String
  room_no_gte: String
  room_no_contains: String
  room_no_not_contains: String
  room_no_starts_with: String
  room_no_not_starts_with: String
  room_no_ends_with: String
  room_no_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  email: String
  image_url: String
  phone: String
  first_name: String
  last_name: String
  room_no: String
}

input UserUpdateInput {
  username: String
  email: String
  image_url: String
  phone: String
  first_name: String
  last_name: String
  room_no: String
}

input UserUpdateManyDataInput {
  username: String
  email: String
  image_url: String
  phone: String
  first_name: String
  last_name: String
  room_no: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  image_url: String
  phone: String
  first_name: String
  last_name: String
  room_no: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  image_url: String
  image_url_not: String
  image_url_in: [String!]
  image_url_not_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_gt: String
  image_url_gte: String
  image_url_contains: String
  image_url_not_contains: String
  image_url_starts_with: String
  image_url_not_starts_with: String
  image_url_ends_with: String
  image_url_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  room_no: String
  room_no_not: String
  room_no_in: [String!]
  room_no_not_in: [String!]
  room_no_lt: String
  room_no_lte: String
  room_no_gt: String
  room_no_gte: String
  room_no_contains: String
  room_no_not_contains: String
  room_no_starts_with: String
  room_no_not_starts_with: String
  room_no_ends_with: String
  room_no_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phone: String
  room_no: String
}

type Washer {
  id: ID!
  status: String!
  time_elapsed: String!
  time_remaining: String!
}

type WasherConnection {
  pageInfo: PageInfo!
  edges: [WasherEdge]!
  aggregate: AggregateWasher!
}

input WasherCreateInput {
  id: ID
  status: String!
  time_elapsed: String!
  time_remaining: String!
}

type WasherEdge {
  node: Washer!
  cursor: String!
}

enum WasherOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  time_elapsed_ASC
  time_elapsed_DESC
  time_remaining_ASC
  time_remaining_DESC
}

type WasherPreviousValues {
  id: ID!
  status: String!
  time_elapsed: String!
  time_remaining: String!
}

type WasherSubscriptionPayload {
  mutation: MutationType!
  node: Washer
  updatedFields: [String!]
  previousValues: WasherPreviousValues
}

input WasherSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WasherWhereInput
  AND: [WasherSubscriptionWhereInput!]
  OR: [WasherSubscriptionWhereInput!]
  NOT: [WasherSubscriptionWhereInput!]
}

input WasherUpdateInput {
  status: String
  time_elapsed: String
  time_remaining: String
}

input WasherUpdateManyMutationInput {
  status: String
  time_elapsed: String
  time_remaining: String
}

input WasherWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  time_elapsed: String
  time_elapsed_not: String
  time_elapsed_in: [String!]
  time_elapsed_not_in: [String!]
  time_elapsed_lt: String
  time_elapsed_lte: String
  time_elapsed_gt: String
  time_elapsed_gte: String
  time_elapsed_contains: String
  time_elapsed_not_contains: String
  time_elapsed_starts_with: String
  time_elapsed_not_starts_with: String
  time_elapsed_ends_with: String
  time_elapsed_not_ends_with: String
  time_remaining: String
  time_remaining_not: String
  time_remaining_in: [String!]
  time_remaining_not_in: [String!]
  time_remaining_lt: String
  time_remaining_lte: String
  time_remaining_gt: String
  time_remaining_gte: String
  time_remaining_contains: String
  time_remaining_not_contains: String
  time_remaining_starts_with: String
  time_remaining_not_starts_with: String
  time_remaining_ends_with: String
  time_remaining_not_ends_with: String
  AND: [WasherWhereInput!]
  OR: [WasherWhereInput!]
  NOT: [WasherWhereInput!]
}

input WasherWhereUniqueInput {
  id: ID
}
`